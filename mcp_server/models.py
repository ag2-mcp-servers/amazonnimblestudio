# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T12:53:23+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field, RootModel, SecretStr, conint, constr


class AccessDeniedException(RootModel[Any]):
    root: Any


class ActiveDirectoryComputerAttributeName(
    RootModel[constr(min_length=1, max_length=40)]
):
    root: constr(min_length=1, max_length=40) = Field(
        ..., description='The name for the LDAP attribute.'
    )


class ActiveDirectoryComputerAttributeValue(
    RootModel[constr(min_length=1, max_length=64)]
):
    root: constr(min_length=1, max_length=64) = Field(
        ..., description='The value for the LDAP attribute.'
    )


class ActiveDirectoryDnsIpAddress(RootModel[str]):
    root: str


class ActiveDirectoryDnsIpAddressList(RootModel[List[ActiveDirectoryDnsIpAddress]]):
    root: List[ActiveDirectoryDnsIpAddress] = Field(..., max_length=10, min_length=0)


class ActiveDirectoryOrganizationalUnitDistinguishedName(
    RootModel[constr(min_length=1, max_length=2000)]
):
    root: constr(min_length=1, max_length=2000) = Field(
        ...,
        description='The fully-qualified distinguished name of the organizational unit to place the computer account in.',
    )


class AutomaticTerminationMode(Enum):
    DEACTIVATED = 'DEACTIVATED'
    ACTIVATED = 'ACTIVATED'


class ClientToken(RootModel[constr(min_length=1, max_length=64)]):
    root: constr(min_length=1, max_length=64)


class ConflictException(RootModel[Any]):
    root: Any


class DeleteLaunchProfileMemberRequest(BaseModel):
    pass


class DeleteLaunchProfileMemberResponse(BaseModel):
    pass


class DeleteLaunchProfileRequest(BaseModel):
    pass


class DeleteStreamingImageRequest(BaseModel):
    pass


class DeleteStreamingSessionRequest(BaseModel):
    pass


class DeleteStudioComponentRequest(BaseModel):
    pass


class DeleteStudioMemberRequest(BaseModel):
    pass


class DeleteStudioMemberResponse(BaseModel):
    pass


class DeleteStudioRequest(BaseModel):
    pass


class DirectoryId(RootModel[str]):
    root: str


class EC2ImageId(RootModel[constr(pattern=r'^ami-[0-9A-z]+$')]):
    root: constr(pattern=r'^ami-[0-9A-z]+$')


class EC2SubnetId(RootModel[str]):
    root: str


class EC2SubnetIdList(RootModel[List[EC2SubnetId]]):
    root: List[EC2SubnetId] = Field(..., max_length=6, min_length=0)


class EulaAcceptanceId(
    RootModel[constr(pattern=r'^[a-zA-Z0-9-_]*$', min_length=0, max_length=22)]
):
    root: constr(pattern=r'^[a-zA-Z0-9-_]*$', min_length=0, max_length=22) = Field(
        ..., description='The EULA acceptance ID.'
    )


class EulaId(
    RootModel[constr(pattern=r'^[a-zA-Z0-9-_]*$', min_length=0, max_length=22)]
):
    root: constr(pattern=r'^[a-zA-Z0-9-_]*$', min_length=0, max_length=22) = Field(
        ..., description='Represents a EULA resource.'
    )


class EulaName(RootModel[constr(min_length=0, max_length=64)]):
    root: constr(min_length=0, max_length=64)


class GetEulaRequest(BaseModel):
    pass


class GetLaunchProfileDetailsRequest(BaseModel):
    pass


class GetLaunchProfileInitializationRequest(BaseModel):
    pass


class GetLaunchProfileMemberRequest(BaseModel):
    pass


class GetLaunchProfileRequest(BaseModel):
    pass


class GetStreamingImageRequest(BaseModel):
    pass


class GetStreamingSessionBackupRequest(BaseModel):
    pass


class GetStreamingSessionRequest(BaseModel):
    pass


class GetStreamingSessionStreamRequest(BaseModel):
    pass


class GetStudioComponentRequest(BaseModel):
    pass


class GetStudioMemberRequest(BaseModel):
    pass


class GetStudioRequest(BaseModel):
    pass


class InternalServerErrorException(RootModel[Any]):
    root: Any


class LaunchProfileDescription(RootModel[SecretStr]):
    root: SecretStr = Field(
        ..., description='A human-readable description of the launch profile.'
    )


class LaunchProfileId(
    RootModel[constr(pattern=r'^[a-zA-Z0-9-_]*$', min_length=0, max_length=22)]
):
    root: constr(pattern=r'^[a-zA-Z0-9-_]*$', min_length=0, max_length=22)


class LaunchProfileName(RootModel[SecretStr]):
    root: SecretStr


class LaunchProfilePersona(Enum):
    USER = 'USER'


class LaunchProfilePlatform(Enum):
    LINUX = 'LINUX'
    WINDOWS = 'WINDOWS'


class LaunchProfileProtocolVersion(
    RootModel[constr(pattern=r'^2021\-03\-31$', min_length=0, max_length=10)]
):
    root: constr(pattern=r'^2021\-03\-31$', min_length=0, max_length=10) = Field(
        ...,
        description='The version number of the protocol that is used by the launch profile. The only valid version is "2021-03-31".',
    )


class LaunchProfileProtocolVersionList(RootModel[List[LaunchProfileProtocolVersion]]):
    root: List[LaunchProfileProtocolVersion]


class LaunchProfileState(Enum):
    CREATE_IN_PROGRESS = 'CREATE_IN_PROGRESS'
    READY = 'READY'
    UPDATE_IN_PROGRESS = 'UPDATE_IN_PROGRESS'
    DELETE_IN_PROGRESS = 'DELETE_IN_PROGRESS'
    DELETED = 'DELETED'
    DELETE_FAILED = 'DELETE_FAILED'
    CREATE_FAILED = 'CREATE_FAILED'
    UPDATE_FAILED = 'UPDATE_FAILED'


class LaunchProfileStateList(RootModel[List[LaunchProfileState]]):
    root: List[LaunchProfileState]


class LaunchProfileStatusCode(Enum):
    LAUNCH_PROFILE_CREATED = 'LAUNCH_PROFILE_CREATED'
    LAUNCH_PROFILE_UPDATED = 'LAUNCH_PROFILE_UPDATED'
    LAUNCH_PROFILE_DELETED = 'LAUNCH_PROFILE_DELETED'
    LAUNCH_PROFILE_CREATE_IN_PROGRESS = 'LAUNCH_PROFILE_CREATE_IN_PROGRESS'
    LAUNCH_PROFILE_UPDATE_IN_PROGRESS = 'LAUNCH_PROFILE_UPDATE_IN_PROGRESS'
    LAUNCH_PROFILE_DELETE_IN_PROGRESS = 'LAUNCH_PROFILE_DELETE_IN_PROGRESS'
    INTERNAL_ERROR = 'INTERNAL_ERROR'
    STREAMING_IMAGE_NOT_FOUND = 'STREAMING_IMAGE_NOT_FOUND'
    STREAMING_IMAGE_NOT_READY = 'STREAMING_IMAGE_NOT_READY'
    LAUNCH_PROFILE_WITH_STREAM_SESSIONS_NOT_DELETED = (
        'LAUNCH_PROFILE_WITH_STREAM_SESSIONS_NOT_DELETED'
    )
    ENCRYPTION_KEY_ACCESS_DENIED = 'ENCRYPTION_KEY_ACCESS_DENIED'
    ENCRYPTION_KEY_NOT_FOUND = 'ENCRYPTION_KEY_NOT_FOUND'
    INVALID_SUBNETS_PROVIDED = 'INVALID_SUBNETS_PROVIDED'
    INVALID_INSTANCE_TYPES_PROVIDED = 'INVALID_INSTANCE_TYPES_PROVIDED'
    INVALID_SUBNETS_COMBINATION = 'INVALID_SUBNETS_COMBINATION'


class LaunchProfileValidationState(Enum):
    VALIDATION_NOT_STARTED = 'VALIDATION_NOT_STARTED'
    VALIDATION_IN_PROGRESS = 'VALIDATION_IN_PROGRESS'
    VALIDATION_SUCCESS = 'VALIDATION_SUCCESS'
    VALIDATION_FAILED = 'VALIDATION_FAILED'
    VALIDATION_FAILED_INTERNAL_SERVER_ERROR = 'VALIDATION_FAILED_INTERNAL_SERVER_ERROR'


class LaunchProfileValidationStatusCode(Enum):
    VALIDATION_NOT_STARTED = 'VALIDATION_NOT_STARTED'
    VALIDATION_IN_PROGRESS = 'VALIDATION_IN_PROGRESS'
    VALIDATION_SUCCESS = 'VALIDATION_SUCCESS'
    VALIDATION_FAILED_INVALID_SUBNET_ROUTE_TABLE_ASSOCIATION = (
        'VALIDATION_FAILED_INVALID_SUBNET_ROUTE_TABLE_ASSOCIATION'
    )
    VALIDATION_FAILED_SUBNET_NOT_FOUND = 'VALIDATION_FAILED_SUBNET_NOT_FOUND'
    VALIDATION_FAILED_INVALID_SECURITY_GROUP_ASSOCIATION = (
        'VALIDATION_FAILED_INVALID_SECURITY_GROUP_ASSOCIATION'
    )
    VALIDATION_FAILED_INVALID_ACTIVE_DIRECTORY = (
        'VALIDATION_FAILED_INVALID_ACTIVE_DIRECTORY'
    )
    VALIDATION_FAILED_UNAUTHORIZED = 'VALIDATION_FAILED_UNAUTHORIZED'
    VALIDATION_FAILED_INTERNAL_SERVER_ERROR = 'VALIDATION_FAILED_INTERNAL_SERVER_ERROR'


class LaunchProfileValidationStatusMessage(RootModel[str]):
    root: str


class LaunchProfileValidationType(Enum):
    VALIDATE_ACTIVE_DIRECTORY_STUDIO_COMPONENT = (
        'VALIDATE_ACTIVE_DIRECTORY_STUDIO_COMPONENT'
    )
    VALIDATE_SUBNET_ASSOCIATION = 'VALIDATE_SUBNET_ASSOCIATION'
    VALIDATE_NETWORK_ACL_ASSOCIATION = 'VALIDATE_NETWORK_ACL_ASSOCIATION'
    VALIDATE_SECURITY_GROUP_ASSOCIATION = 'VALIDATE_SECURITY_GROUP_ASSOCIATION'


class LaunchPurpose(
    RootModel[constr(pattern=r'^[A-Z0-9_]+$', min_length=0, max_length=64)]
):
    root: constr(pattern=r'^[A-Z0-9_]+$', min_length=0, max_length=64) = Field(
        ..., description='The launch purpose.'
    )


class LinuxMountPoint(RootModel[SecretStr]):
    root: SecretStr


class ListEulaAcceptancesRequest(BaseModel):
    pass


class ListEulasRequest(BaseModel):
    pass


class ListLaunchProfileMembersRequest(BaseModel):
    pass


class ListLaunchProfilesRequest(BaseModel):
    pass


class ListStreamingImagesRequest(BaseModel):
    pass


class ListStreamingSessionBackupsRequest(BaseModel):
    pass


class ListStreamingSessionsRequest(BaseModel):
    pass


class ListStudioComponentsRequest(BaseModel):
    pass


class ListStudioMembersRequest(BaseModel):
    pass


class ListStudiosRequest(BaseModel):
    pass


class ListTagsForResourceRequest(BaseModel):
    pass


class MaxResults(RootModel[conint(ge=1, le=100)]):
    root: conint(ge=1, le=100)


class PutLaunchProfileMembersResponse(BaseModel):
    pass


class PutStudioMembersResponse(BaseModel):
    pass


class Region(
    RootModel[
        constr(
            pattern=r'[a-z]{2}-?(iso|gov)?-{1}[a-z]*-{1}[0-9]',
            min_length=0,
            max_length=50,
        )
    ]
):
    root: constr(
        pattern=r'[a-z]{2}-?(iso|gov)?-{1}[a-z]*-{1}[0-9]', min_length=0, max_length=50
    )


class ResourceNotFoundException(RootModel[Any]):
    root: Any


class RoleArn(RootModel[constr(min_length=0, max_length=2048)]):
    root: constr(min_length=0, max_length=2048)


class ScriptParameterKey(
    RootModel[constr(pattern=r'^[a-zA-Z_][a-zA-Z0-9_]+$', min_length=1, max_length=64)]
):
    root: constr(pattern=r'^[a-zA-Z_][a-zA-Z0-9_]+$', min_length=1, max_length=64) = (
        Field(..., description='A script parameter key.')
    )


class ScriptParameterValue(RootModel[constr(min_length=1, max_length=256)]):
    root: constr(min_length=1, max_length=256) = Field(
        ..., description='A script parameter value.'
    )


class SecurityGroupId(RootModel[str]):
    root: str


class SensitiveString(RootModel[SecretStr]):
    root: SecretStr


class ServiceQuotaExceededException(RootModel[Any]):
    root: Any


class SessionBackupMode(Enum):
    AUTOMATIC = 'AUTOMATIC'
    DEACTIVATED = 'DEACTIVATED'


class SessionPersistenceMode(Enum):
    DEACTIVATED = 'DEACTIVATED'
    ACTIVATED = 'ACTIVATED'


class StartStudioSSOConfigurationRepairRequest(BaseModel):
    pass


class StreamConfigurationMaxBackupsToRetain(RootModel[conint(ge=0, le=10)]):
    root: conint(ge=0, le=10)


class StreamConfigurationMaxSessionLengthInMinutes(RootModel[conint(ge=1, le=43200)]):
    root: conint(ge=1, le=43200)


class StreamConfigurationMaxStoppedSessionLengthInMinutes(
    RootModel[conint(ge=0, le=5760)]
):
    root: conint(ge=0, le=5760)


class StreamConfigurationSessionBackup(BaseModel):
    maxBackupsToRetain: Optional[StreamConfigurationMaxBackupsToRetain] = None
    mode: Optional[SessionBackupMode] = None


class StreamingClipboardMode(Enum):
    ENABLED = 'ENABLED'
    DISABLED = 'DISABLED'


class StreamingImageDescription(RootModel[SecretStr]):
    root: SecretStr = Field(..., description='The description.')


class StreamingImageEncryptionConfigurationKeyArn(
    RootModel[constr(pattern=r'^arn:.*', min_length=4)]
):
    root: constr(pattern=r'^arn:.*', min_length=4)


class StreamingImageEncryptionConfigurationKeyType(Enum):
    CUSTOMER_MANAGED_KEY = 'CUSTOMER_MANAGED_KEY'


class StreamingImageId(
    RootModel[constr(pattern=r'^[a-zA-Z0-9-_]*$', min_length=0, max_length=22)]
):
    root: constr(pattern=r'^[a-zA-Z0-9-_]*$', min_length=0, max_length=22)


class StreamingImageIdList(RootModel[List[StreamingImageId]]):
    root: List[StreamingImageId] = Field(
        ...,
        description='A list of streaming image IDs that users can select from when launching a streaming session with this launch profile.',
        max_length=20,
        min_length=1,
    )


class StreamingImageName(RootModel[SecretStr]):
    root: SecretStr = Field(
        ..., description='A friendly name for a streaming image resource.'
    )


class StreamingImageOwner(RootModel[str]):
    root: str = Field(
        ...,
        description='<p>StreamingImageOwner is the owner of a particular streaming image.</p> <p>This string is either the studioId that contains the streaming image, or the word <code>AMAZON</code> for images provided by Nimble Studio.</p>',
    )


class StreamingImagePlatform(RootModel[constr(pattern=r'^[a-zA-Z]*$')]):
    root: constr(pattern=r'^[a-zA-Z]*$') = Field(
        ...,
        description='The platform of this streaming image, either Windows or Linux.',
    )


class StreamingImageState(Enum):
    CREATE_IN_PROGRESS = 'CREATE_IN_PROGRESS'
    READY = 'READY'
    DELETE_IN_PROGRESS = 'DELETE_IN_PROGRESS'
    DELETED = 'DELETED'
    UPDATE_IN_PROGRESS = 'UPDATE_IN_PROGRESS'
    UPDATE_FAILED = 'UPDATE_FAILED'
    CREATE_FAILED = 'CREATE_FAILED'
    DELETE_FAILED = 'DELETE_FAILED'


class StreamingImageStatusCode(Enum):
    STREAMING_IMAGE_CREATE_IN_PROGRESS = 'STREAMING_IMAGE_CREATE_IN_PROGRESS'
    STREAMING_IMAGE_READY = 'STREAMING_IMAGE_READY'
    STREAMING_IMAGE_DELETE_IN_PROGRESS = 'STREAMING_IMAGE_DELETE_IN_PROGRESS'
    STREAMING_IMAGE_DELETED = 'STREAMING_IMAGE_DELETED'
    STREAMING_IMAGE_UPDATE_IN_PROGRESS = 'STREAMING_IMAGE_UPDATE_IN_PROGRESS'
    INTERNAL_ERROR = 'INTERNAL_ERROR'
    ACCESS_DENIED = 'ACCESS_DENIED'


class StreamingInstanceType(Enum):
    g4dn_xlarge = 'g4dn.xlarge'
    g4dn_2xlarge = 'g4dn.2xlarge'
    g4dn_4xlarge = 'g4dn.4xlarge'
    g4dn_8xlarge = 'g4dn.8xlarge'
    g4dn_12xlarge = 'g4dn.12xlarge'
    g4dn_16xlarge = 'g4dn.16xlarge'
    g3_4xlarge = 'g3.4xlarge'
    g3s_xlarge = 'g3s.xlarge'
    g5_xlarge = 'g5.xlarge'
    g5_2xlarge = 'g5.2xlarge'
    g5_4xlarge = 'g5.4xlarge'
    g5_8xlarge = 'g5.8xlarge'
    g5_16xlarge = 'g5.16xlarge'


class StreamingInstanceTypeList(RootModel[List[StreamingInstanceType]]):
    root: List[StreamingInstanceType] = Field(
        ...,
        description='The EC2 instance types that users can select from when launching a streaming session with this launch profile.',
        max_length=30,
        min_length=1,
    )


class StreamingSessionId(RootModel[str]):
    root: str


class StreamingSessionState(Enum):
    CREATE_IN_PROGRESS = 'CREATE_IN_PROGRESS'
    DELETE_IN_PROGRESS = 'DELETE_IN_PROGRESS'
    READY = 'READY'
    DELETED = 'DELETED'
    CREATE_FAILED = 'CREATE_FAILED'
    DELETE_FAILED = 'DELETE_FAILED'
    STOP_IN_PROGRESS = 'STOP_IN_PROGRESS'
    START_IN_PROGRESS = 'START_IN_PROGRESS'
    STOPPED = 'STOPPED'
    STOP_FAILED = 'STOP_FAILED'
    START_FAILED = 'START_FAILED'


class StreamingSessionStatusCode(Enum):
    STREAMING_SESSION_READY = 'STREAMING_SESSION_READY'
    STREAMING_SESSION_DELETED = 'STREAMING_SESSION_DELETED'
    STREAMING_SESSION_CREATE_IN_PROGRESS = 'STREAMING_SESSION_CREATE_IN_PROGRESS'
    STREAMING_SESSION_DELETE_IN_PROGRESS = 'STREAMING_SESSION_DELETE_IN_PROGRESS'
    INTERNAL_ERROR = 'INTERNAL_ERROR'
    INSUFFICIENT_CAPACITY = 'INSUFFICIENT_CAPACITY'
    ACTIVE_DIRECTORY_DOMAIN_JOIN_ERROR = 'ACTIVE_DIRECTORY_DOMAIN_JOIN_ERROR'
    NETWORK_CONNECTION_ERROR = 'NETWORK_CONNECTION_ERROR'
    INITIALIZATION_SCRIPT_ERROR = 'INITIALIZATION_SCRIPT_ERROR'
    DECRYPT_STREAMING_IMAGE_ERROR = 'DECRYPT_STREAMING_IMAGE_ERROR'
    NETWORK_INTERFACE_ERROR = 'NETWORK_INTERFACE_ERROR'
    STREAMING_SESSION_STOPPED = 'STREAMING_SESSION_STOPPED'
    STREAMING_SESSION_STARTED = 'STREAMING_SESSION_STARTED'
    STREAMING_SESSION_STOP_IN_PROGRESS = 'STREAMING_SESSION_STOP_IN_PROGRESS'
    STREAMING_SESSION_START_IN_PROGRESS = 'STREAMING_SESSION_START_IN_PROGRESS'
    AMI_VALIDATION_ERROR = 'AMI_VALIDATION_ERROR'


class StreamingSessionStorageMode(Enum):
    UPLOAD = 'UPLOAD'


class StreamingSessionStorageModeList(RootModel[List[StreamingSessionStorageMode]]):
    root: List[StreamingSessionStorageMode] = Field(..., min_length=1)


class StreamingSessionStorageRootPathLinux(RootModel[SecretStr]):
    root: SecretStr


class StreamingSessionStorageRootPathWindows(RootModel[SecretStr]):
    root: SecretStr


class StreamingSessionStreamExpirationInSeconds(RootModel[conint(ge=60, le=3600)]):
    root: conint(ge=60, le=3600)


class StreamingSessionStreamState(Enum):
    READY = 'READY'
    CREATE_IN_PROGRESS = 'CREATE_IN_PROGRESS'
    DELETE_IN_PROGRESS = 'DELETE_IN_PROGRESS'
    DELETED = 'DELETED'
    CREATE_FAILED = 'CREATE_FAILED'
    DELETE_FAILED = 'DELETE_FAILED'


class StreamingSessionStreamStatusCode(Enum):
    STREAM_CREATE_IN_PROGRESS = 'STREAM_CREATE_IN_PROGRESS'
    STREAM_READY = 'STREAM_READY'
    STREAM_DELETE_IN_PROGRESS = 'STREAM_DELETE_IN_PROGRESS'
    STREAM_DELETED = 'STREAM_DELETED'
    INTERNAL_ERROR = 'INTERNAL_ERROR'
    NETWORK_CONNECTION_ERROR = 'NETWORK_CONNECTION_ERROR'


class String(RootModel[str]):
    root: str


class StringList(RootModel[List[String]]):
    root: List[String]


class StudioComponentDescription(RootModel[SecretStr]):
    root: SecretStr


class StudioComponentId(
    RootModel[constr(pattern=r'^[a-zA-Z0-9-_]*$', min_length=0, max_length=22)]
):
    root: constr(pattern=r'^[a-zA-Z0-9-_]*$', min_length=0, max_length=22)


class StudioComponentInitializationScriptContent(RootModel[SecretStr]):
    root: SecretStr


class StudioComponentInitializationScriptRunContext(Enum):
    SYSTEM_INITIALIZATION = 'SYSTEM_INITIALIZATION'
    USER_INITIALIZATION = 'USER_INITIALIZATION'


class StudioComponentName(RootModel[SecretStr]):
    root: SecretStr


class StudioComponentSecurityGroupIdList(RootModel[List[SecurityGroupId]]):
    root: List[SecurityGroupId] = Field(..., max_length=30, min_length=0)


class StudioComponentState(Enum):
    CREATE_IN_PROGRESS = 'CREATE_IN_PROGRESS'
    READY = 'READY'
    UPDATE_IN_PROGRESS = 'UPDATE_IN_PROGRESS'
    DELETE_IN_PROGRESS = 'DELETE_IN_PROGRESS'
    DELETED = 'DELETED'
    DELETE_FAILED = 'DELETE_FAILED'
    CREATE_FAILED = 'CREATE_FAILED'
    UPDATE_FAILED = 'UPDATE_FAILED'


class StudioComponentStateList(RootModel[List[StudioComponentState]]):
    root: List[StudioComponentState]


class StudioComponentStatusCode(Enum):
    ACTIVE_DIRECTORY_ALREADY_EXISTS = 'ACTIVE_DIRECTORY_ALREADY_EXISTS'
    STUDIO_COMPONENT_CREATED = 'STUDIO_COMPONENT_CREATED'
    STUDIO_COMPONENT_UPDATED = 'STUDIO_COMPONENT_UPDATED'
    STUDIO_COMPONENT_DELETED = 'STUDIO_COMPONENT_DELETED'
    ENCRYPTION_KEY_ACCESS_DENIED = 'ENCRYPTION_KEY_ACCESS_DENIED'
    ENCRYPTION_KEY_NOT_FOUND = 'ENCRYPTION_KEY_NOT_FOUND'
    STUDIO_COMPONENT_CREATE_IN_PROGRESS = 'STUDIO_COMPONENT_CREATE_IN_PROGRESS'
    STUDIO_COMPONENT_UPDATE_IN_PROGRESS = 'STUDIO_COMPONENT_UPDATE_IN_PROGRESS'
    STUDIO_COMPONENT_DELETE_IN_PROGRESS = 'STUDIO_COMPONENT_DELETE_IN_PROGRESS'
    INTERNAL_ERROR = 'INTERNAL_ERROR'


class StudioComponentSubtype(Enum):
    AWS_MANAGED_MICROSOFT_AD = 'AWS_MANAGED_MICROSOFT_AD'
    AMAZON_FSX_FOR_WINDOWS = 'AMAZON_FSX_FOR_WINDOWS'
    AMAZON_FSX_FOR_LUSTRE = 'AMAZON_FSX_FOR_LUSTRE'
    CUSTOM = 'CUSTOM'


class StudioComponentType(Enum):
    ACTIVE_DIRECTORY = 'ACTIVE_DIRECTORY'
    SHARED_FILE_SYSTEM = 'SHARED_FILE_SYSTEM'
    COMPUTE_FARM = 'COMPUTE_FARM'
    LICENSE_SERVICE = 'LICENSE_SERVICE'
    CUSTOM = 'CUSTOM'


class StudioComponentTypeList(RootModel[List[StudioComponentType]]):
    root: List[StudioComponentType]


class StudioDisplayName(RootModel[SecretStr]):
    root: SecretStr


class StudioEncryptionConfigurationKeyArn(
    RootModel[constr(pattern=r'^arn:.*', min_length=4)]
):
    root: constr(pattern=r'^arn:.*', min_length=4) = Field(
        ...,
        description='The Amazon Resource Name (ARN) for a KMS key that is used to encrypt studio data.',
    )


class StudioEncryptionConfigurationKeyType(Enum):
    AWS_OWNED_KEY = 'AWS_OWNED_KEY'
    CUSTOMER_MANAGED_KEY = 'CUSTOMER_MANAGED_KEY'


class StudioName(
    RootModel[constr(pattern=r'^[a-z0-9]*$', min_length=3, max_length=64)]
):
    root: constr(pattern=r'^[a-z0-9]*$', min_length=3, max_length=64)


class StudioPersona(Enum):
    ADMINISTRATOR = 'ADMINISTRATOR'


class StudioState(Enum):
    CREATE_IN_PROGRESS = 'CREATE_IN_PROGRESS'
    READY = 'READY'
    UPDATE_IN_PROGRESS = 'UPDATE_IN_PROGRESS'
    DELETE_IN_PROGRESS = 'DELETE_IN_PROGRESS'
    DELETED = 'DELETED'
    DELETE_FAILED = 'DELETE_FAILED'
    CREATE_FAILED = 'CREATE_FAILED'
    UPDATE_FAILED = 'UPDATE_FAILED'


class StudioStatusCode(Enum):
    STUDIO_CREATED = 'STUDIO_CREATED'
    STUDIO_DELETED = 'STUDIO_DELETED'
    STUDIO_UPDATED = 'STUDIO_UPDATED'
    STUDIO_CREATE_IN_PROGRESS = 'STUDIO_CREATE_IN_PROGRESS'
    STUDIO_UPDATE_IN_PROGRESS = 'STUDIO_UPDATE_IN_PROGRESS'
    STUDIO_DELETE_IN_PROGRESS = 'STUDIO_DELETE_IN_PROGRESS'
    STUDIO_WITH_LAUNCH_PROFILES_NOT_DELETED = 'STUDIO_WITH_LAUNCH_PROFILES_NOT_DELETED'
    STUDIO_WITH_STUDIO_COMPONENTS_NOT_DELETED = (
        'STUDIO_WITH_STUDIO_COMPONENTS_NOT_DELETED'
    )
    STUDIO_WITH_STREAMING_IMAGES_NOT_DELETED = (
        'STUDIO_WITH_STREAMING_IMAGES_NOT_DELETED'
    )
    AWS_SSO_NOT_ENABLED = 'AWS_SSO_NOT_ENABLED'
    AWS_SSO_ACCESS_DENIED = 'AWS_SSO_ACCESS_DENIED'
    ROLE_NOT_OWNED_BY_STUDIO_OWNER = 'ROLE_NOT_OWNED_BY_STUDIO_OWNER'
    ROLE_COULD_NOT_BE_ASSUMED = 'ROLE_COULD_NOT_BE_ASSUMED'
    INTERNAL_ERROR = 'INTERNAL_ERROR'
    ENCRYPTION_KEY_NOT_FOUND = 'ENCRYPTION_KEY_NOT_FOUND'
    ENCRYPTION_KEY_ACCESS_DENIED = 'ENCRYPTION_KEY_ACCESS_DENIED'
    AWS_SSO_CONFIGURATION_REPAIRED = 'AWS_SSO_CONFIGURATION_REPAIRED'
    AWS_SSO_CONFIGURATION_REPAIR_IN_PROGRESS = (
        'AWS_SSO_CONFIGURATION_REPAIR_IN_PROGRESS'
    )
    AWS_STS_REGION_DISABLED = 'AWS_STS_REGION_DISABLED'


class TagResourceResponse(BaseModel):
    pass


class Tags(RootModel[Optional[Dict[str, String]]]):
    root: Optional[Dict[str, String]] = None


class ThrottlingException(RootModel[Any]):
    root: Any


class Timestamp(RootModel[datetime]):
    root: datetime


class UntagResourceRequest(BaseModel):
    pass


class UntagResourceResponse(BaseModel):
    pass


class UpdateLaunchProfileMemberRequest(BaseModel):
    persona: LaunchProfilePersona


class UpdateStreamingImageRequest(BaseModel):
    description: Optional[StreamingImageDescription] = None
    name: Optional[StreamingImageName] = None


class UpdateStudioRequest(BaseModel):
    adminRoleArn: Optional[RoleArn] = None
    displayName: Optional[StudioDisplayName] = None
    userRoleArn: Optional[RoleArn] = None


class ValidationException(RootModel[Any]):
    root: Any


class ValidationResult(BaseModel):
    state: LaunchProfileValidationState
    statusCode: LaunchProfileValidationStatusCode
    statusMessage: LaunchProfileValidationStatusMessage
    type: LaunchProfileValidationType


class ValidationResults(RootModel[List[ValidationResult]]):
    root: List[ValidationResult]


class VolumeIops(RootModel[conint(ge=3000, le=16000)]):
    root: conint(ge=3000, le=16000)


class VolumeRetentionMode(Enum):
    RETAIN = 'RETAIN'
    DELETE = 'DELETE'


class VolumeSizeInGiB(RootModel[conint(ge=100, le=16000)]):
    root: conint(ge=100, le=16000)


class VolumeThroughputInMiBs(RootModel[conint(ge=125, le=1000)]):
    root: conint(ge=125, le=1000)


class WindowsMountDrive(RootModel[constr(pattern=r'^[A-Z]$')]):
    root: constr(pattern=r'^[A-Z]$')


class EulaIds(RootModel[List[String]]):
    root: List[String]


class StudioEncryptionConfiguration1(BaseModel):
    keyArn: Optional[StudioEncryptionConfigurationKeyArn] = None
    keyType: Optional[StudioEncryptionConfigurationKeyType] = None


class Field20200801StudiosPostRequest(BaseModel):
    adminRoleArn: constr(min_length=0, max_length=2048) = Field(
        ...,
        description='The IAM role that studio admins will assume when logging in to the Nimble Studio portal.',
    )
    displayName: SecretStr = Field(..., description='A friendly name for the studio.')
    studioEncryptionConfiguration: Optional[StudioEncryptionConfiguration1] = Field(
        None,
        description='Configuration of the encryption method that is used for the studio.',
    )
    studioName: constr(pattern=r'^[a-z0-9]*$', min_length=3, max_length=64) = Field(
        ...,
        description='The studio name that is used in the URL of the Nimble Studio portal when accessed by Nimble Studio users.',
    )
    tags: Optional[Dict[str, String]] = Field(
        None,
        description='A collection of labels, in the form of key-value pairs, that apply to this resource.',
    )
    userRoleArn: constr(min_length=0, max_length=2048) = Field(
        ...,
        description='The IAM role that studio users will assume when logging in to the Nimble Studio portal.',
    )


class Field20200801StudiosStudioIdPatchRequest(BaseModel):
    adminRoleArn: Optional[constr(min_length=0, max_length=2048)] = Field(
        None,
        description='The IAM role that Studio Admins will assume when logging in to the Nimble Studio portal.',
    )
    displayName: Optional[SecretStr] = Field(
        None, description='A friendly name for the studio.'
    )
    userRoleArn: Optional[constr(min_length=0, max_length=2048)] = Field(
        None,
        description='The IAM role that Studio Users will assume when logging in to the Nimble Studio portal.',
    )


class Field20200801StudiosStudioIdEulaAcceptancesPostRequest(BaseModel):
    eulaIds: Optional[List[String]] = Field(None, description='The EULA ID.')


class States(RootModel[List[LaunchProfileState]]):
    root: List[LaunchProfileState]


class LaunchProfileProtocolVersions(RootModel[List[String]]):
    root: List[String]


class Persona(Enum):
    USER = 'USER'


class Field20200801StudiosStudioIdLaunchProfilesLaunchProfileIdMembershipPrincipalIdPatchRequest(
    BaseModel
):
    persona: Persona = Field(..., description='The persona.')


class Field20200801StudiosStudioIdStreamingImagesPostRequest(BaseModel):
    description: Optional[SecretStr] = Field(None, description='The description.')
    ec2ImageId: constr(pattern=r'^ami-[0-9A-z]+$') = Field(
        ...,
        description='The ID of an EC2 machine image with which to create this streaming image.',
    )
    name: SecretStr = Field(
        ..., description='A friendly name for a streaming image resource.'
    )
    tags: Optional[Dict[str, String]] = Field(
        None,
        description='A collection of labels, in the form of key-value pairs, that apply to this resource.',
    )


class Field20200801StudiosStudioIdStreamingImagesStreamingImageIdPatchRequest(
    BaseModel
):
    description: Optional[SecretStr] = Field(None, description='The description.')
    name: Optional[SecretStr] = Field(
        None, description='A friendly name for a streaming image resource.'
    )


class Ec2InstanceType(Enum):
    g4dn_xlarge = 'g4dn.xlarge'
    g4dn_2xlarge = 'g4dn.2xlarge'
    g4dn_4xlarge = 'g4dn.4xlarge'
    g4dn_8xlarge = 'g4dn.8xlarge'
    g4dn_12xlarge = 'g4dn.12xlarge'
    g4dn_16xlarge = 'g4dn.16xlarge'
    g3_4xlarge = 'g3.4xlarge'
    g3s_xlarge = 'g3s.xlarge'
    g5_xlarge = 'g5.xlarge'
    g5_2xlarge = 'g5.2xlarge'
    g5_4xlarge = 'g5.4xlarge'
    g5_8xlarge = 'g5.8xlarge'
    g5_16xlarge = 'g5.16xlarge'


class Field20200801StudiosStudioIdStreamingSessionsPostRequest(BaseModel):
    ec2InstanceType: Optional[Ec2InstanceType] = Field(
        None, description='The EC2 Instance type used for the streaming session.'
    )
    launchProfileId: str = Field(
        ...,
        description='The ID of the launch profile used to control access from the streaming session.',
    )
    ownedBy: Optional[str] = Field(
        None,
        description='The user ID of the user that owns the streaming session. The user that owns the session will be logging into the session and interacting with the virtual workstation.',
    )
    streamingImageId: Optional[
        constr(pattern=r'^[a-zA-Z0-9-_]*$', min_length=0, max_length=22)
    ] = Field(None, description='The ID of the streaming image.')
    tags: Optional[Dict[str, String]] = Field(
        None,
        description='A collection of labels, in the form of key-value pairs, that apply to this resource.',
    )


class Field20200801StudiosStudioIdStreamingSessionsSessionIdStartPostRequest(BaseModel):
    backupId: Optional[str] = Field(None, description='The ID of the backup.')


class Field20200801StudiosStudioIdStreamingSessionsSessionIdStopPostRequest(BaseModel):
    volumeRetentionMode: Optional[VolumeRetentionMode] = Field(
        None,
        description='Adds additional instructions to a streaming session stop action to either retain the EBS volumes or delete the EBS volumes.',
    )


class Field20200801StudiosStudioIdStreamingSessionsSessionIdStreamsPostRequest(
    BaseModel
):
    expirationInSeconds: Optional[conint(ge=60, le=3600)] = Field(
        None, description='The expiration time in seconds.'
    )


class States1(RootModel[List[StudioComponentState]]):
    root: List[StudioComponentState]


class Types(RootModel[List[StudioComponentType]]):
    root: List[StudioComponentType]


class Subtype(Enum):
    AWS_MANAGED_MICROSOFT_AD = 'AWS_MANAGED_MICROSOFT_AD'
    AMAZON_FSX_FOR_WINDOWS = 'AMAZON_FSX_FOR_WINDOWS'
    AMAZON_FSX_FOR_LUSTRE = 'AMAZON_FSX_FOR_LUSTRE'
    CUSTOM = 'CUSTOM'


class Type(Enum):
    ACTIVE_DIRECTORY = 'ACTIVE_DIRECTORY'
    SHARED_FILE_SYSTEM = 'SHARED_FILE_SYSTEM'
    COMPUTE_FARM = 'COMPUTE_FARM'
    LICENSE_SERVICE = 'LICENSE_SERVICE'
    CUSTOM = 'CUSTOM'


class Field20200801TagsResourceArnPostRequest(BaseModel):
    tags: Optional[Dict[str, String]] = Field(
        None,
        description='A collection of labels, in the form of key-value pairs, that apply to this resource.',
    )


class TagKeys(RootModel[List[String]]):
    root: List[String]


class ActiveDirectoryComputerAttribute(BaseModel):
    name: Optional[ActiveDirectoryComputerAttributeName] = None
    value: Optional[ActiveDirectoryComputerAttributeValue] = None


class ActiveDirectoryComputerAttributeList(
    RootModel[List[ActiveDirectoryComputerAttribute]]
):
    root: List[ActiveDirectoryComputerAttribute] = Field(
        ...,
        description='A collection of LDAP attributes to apply to Active Directory computer accounts that are created for streaming sessions.',
        max_length=50,
        min_length=0,
    )


class ActiveDirectoryConfiguration(BaseModel):
    computerAttributes: Optional[ActiveDirectoryComputerAttributeList] = None
    directoryId: Optional[DirectoryId] = None
    organizationalUnitDistinguishedName: Optional[
        ActiveDirectoryOrganizationalUnitDistinguishedName
    ] = None


class ComputeFarmConfiguration(BaseModel):
    activeDirectoryUser: Optional[String] = None
    endpoint: Optional[SensitiveString] = None


class CreateStreamingImageRequest(BaseModel):
    description: Optional[StreamingImageDescription] = None
    ec2ImageId: EC2ImageId
    name: StreamingImageName
    tags: Optional[Tags] = None


class CreateStreamingSessionRequest(BaseModel):
    ec2InstanceType: Optional[StreamingInstanceType] = None
    launchProfileId: String
    ownedBy: Optional[String] = None
    streamingImageId: Optional[StreamingImageId] = None
    tags: Optional[Tags] = None


class CreateStreamingSessionStreamRequest(BaseModel):
    expirationInSeconds: Optional[StreamingSessionStreamExpirationInSeconds] = None


class Eula(BaseModel):
    content: Optional[String] = None
    createdAt: Optional[Timestamp] = None
    eulaId: Optional[EulaId] = None
    name: Optional[EulaName] = None
    updatedAt: Optional[Timestamp] = None


class EulaAcceptance(BaseModel):
    acceptedAt: Optional[Timestamp] = None
    acceptedBy: Optional[String] = None
    accepteeId: Optional[String] = None
    eulaAcceptanceId: Optional[EulaAcceptanceId] = None
    eulaId: Optional[EulaId] = None


class EulaAcceptanceList(RootModel[List[EulaAcceptance]]):
    root: List[EulaAcceptance]


class EulaIdList(RootModel[List[String]]):
    root: List[String]


class EulaList(RootModel[List[Eula]]):
    root: List[Eula]


class GetEulaResponse(BaseModel):
    eula: Optional[Eula] = None


class LaunchProfileInitializationActiveDirectory(BaseModel):
    computerAttributes: Optional[ActiveDirectoryComputerAttributeList] = None
    directoryId: Optional[DirectoryId] = None
    directoryName: Optional[String] = None
    dnsIpAddresses: Optional[ActiveDirectoryDnsIpAddressList] = None
    organizationalUnitDistinguishedName: Optional[
        ActiveDirectoryOrganizationalUnitDistinguishedName
    ] = None
    studioComponentId: Optional[StudioComponentId] = None
    studioComponentName: Optional[StudioComponentName] = None


class LaunchProfileInitializationScript(BaseModel):
    runtimeRoleArn: Optional[RoleArn] = None
    script: Optional[StudioComponentInitializationScriptContent] = None
    secureInitializationRoleArn: Optional[RoleArn] = None
    studioComponentId: Optional[StudioComponentId] = None
    studioComponentName: Optional[StudioComponentName] = None


class LaunchProfileInitializationScriptList(
    RootModel[List[LaunchProfileInitializationScript]]
):
    root: List[LaunchProfileInitializationScript]


class LaunchProfileMembership(BaseModel):
    identityStoreId: Optional[String] = None
    persona: Optional[LaunchProfilePersona] = None
    principalId: Optional[String] = None
    sid: Optional[String] = None


class LaunchProfileMembershipList(RootModel[List[LaunchProfileMembership]]):
    root: List[LaunchProfileMembership] = Field(..., max_length=20, min_length=0)


class LaunchProfileSecurityGroupIdList(RootModel[List[SecurityGroupId]]):
    root: List[SecurityGroupId] = Field(..., min_length=1)


class LaunchProfileStudioComponentIdList(RootModel[List[String]]):
    root: List[String] = Field(..., max_length=100, min_length=1)


class LicenseServiceConfiguration(BaseModel):
    endpoint: Optional[SensitiveString] = None


class ListEulaAcceptancesResponse(BaseModel):
    eulaAcceptances: Optional[EulaAcceptanceList] = None
    nextToken: Optional[String] = None


class ListEulasResponse(BaseModel):
    eulas: Optional[EulaList] = None
    nextToken: Optional[String] = None


class ListLaunchProfileMembersResponse(BaseModel):
    members: Optional[LaunchProfileMembershipList] = None
    nextToken: Optional[String] = None


class ListTagsForResourceResponse(BaseModel):
    tags: Optional[Tags] = None


class NewLaunchProfileMember(BaseModel):
    persona: LaunchProfilePersona
    principalId: String


class NewLaunchProfileMemberList(RootModel[List[NewLaunchProfileMember]]):
    root: List[NewLaunchProfileMember] = Field(..., max_length=20, min_length=1)


class NewStudioMember(BaseModel):
    persona: StudioPersona
    principalId: String


class NewStudioMemberList(RootModel[List[NewStudioMember]]):
    root: List[NewStudioMember] = Field(..., max_length=20, min_length=1)


class PutLaunchProfileMembersRequest(BaseModel):
    identityStoreId: String
    members: NewLaunchProfileMemberList


class PutStudioMembersRequest(BaseModel):
    identityStoreId: String
    members: NewStudioMemberList


class ScriptParameterKeyValue(BaseModel):
    key: Optional[ScriptParameterKey] = None
    value: Optional[ScriptParameterValue] = None


class SharedFileSystemConfiguration(BaseModel):
    endpoint: Optional[SensitiveString] = None
    fileSystemId: Optional[String] = None
    linuxMountPoint: Optional[LinuxMountPoint] = None
    shareName: Optional[SensitiveString] = None
    windowsMountDrive: Optional[WindowsMountDrive] = None


class StartStreamingSessionRequest(BaseModel):
    backupId: Optional[String] = None


class StopStreamingSessionRequest(BaseModel):
    volumeRetentionMode: Optional[VolumeRetentionMode] = None


class StreamingImageEncryptionConfiguration(BaseModel):
    keyArn: Optional[StreamingImageEncryptionConfigurationKeyArn] = None
    keyType: StreamingImageEncryptionConfigurationKeyType


class StreamingSessionBackup(BaseModel):
    arn: Optional[String] = None
    backupId: Optional[String] = None
    createdAt: Optional[Timestamp] = None
    launchProfileId: Optional[String] = None
    ownedBy: Optional[String] = None
    sessionId: Optional[StreamingSessionId] = None
    state: Optional[StreamingSessionState] = None
    statusCode: Optional[StreamingSessionStatusCode] = None
    statusMessage: Optional[String] = None
    tags: Optional[Tags] = None


class StreamingSessionBackupList(RootModel[List[StreamingSessionBackup]]):
    root: List[StreamingSessionBackup]


class StreamingSessionStorageRoot(BaseModel):
    linux: Optional[StreamingSessionStorageRootPathLinux] = None
    windows: Optional[StreamingSessionStorageRootPathWindows] = None


class StreamingSessionStream(BaseModel):
    createdAt: Optional[Timestamp] = None
    createdBy: Optional[String] = None
    expiresAt: Optional[Timestamp] = None
    ownedBy: Optional[String] = None
    state: Optional[StreamingSessionStreamState] = None
    statusCode: Optional[StreamingSessionStreamStatusCode] = None
    streamId: Optional[String] = None
    url: Optional[SensitiveString] = None


class StudioComponentConfiguration(BaseModel):
    activeDirectoryConfiguration: Optional[ActiveDirectoryConfiguration] = None
    computeFarmConfiguration: Optional[ComputeFarmConfiguration] = None
    licenseServiceConfiguration: Optional[LicenseServiceConfiguration] = None
    sharedFileSystemConfiguration: Optional[SharedFileSystemConfiguration] = None


class StudioComponentInitializationScript(BaseModel):
    launchProfileProtocolVersion: Optional[LaunchProfileProtocolVersion] = None
    platform: Optional[LaunchProfilePlatform] = None
    runContext: Optional[StudioComponentInitializationScriptRunContext] = None
    script: Optional[StudioComponentInitializationScriptContent] = None


class StudioComponentInitializationScriptList(
    RootModel[List[StudioComponentInitializationScript]]
):
    root: List[StudioComponentInitializationScript]


class StudioComponentScriptParameterKeyValueList(
    RootModel[List[ScriptParameterKeyValue]]
):
    root: List[ScriptParameterKeyValue] = Field(..., max_length=30, min_length=0)


class StudioComponentSummary(BaseModel):
    createdAt: Optional[Timestamp] = None
    createdBy: Optional[String] = None
    description: Optional[StudioComponentDescription] = None
    name: Optional[StudioComponentName] = None
    studioComponentId: Optional[StudioComponentId] = None
    subtype: Optional[StudioComponentSubtype] = None
    type: Optional[StudioComponentType] = None
    updatedAt: Optional[Timestamp] = None
    updatedBy: Optional[String] = None


class StudioComponentSummaryList(RootModel[List[StudioComponentSummary]]):
    root: List[StudioComponentSummary]


class StudioEncryptionConfiguration(BaseModel):
    keyArn: Optional[StudioEncryptionConfigurationKeyArn] = None
    keyType: StudioEncryptionConfigurationKeyType


class StudioMembership(BaseModel):
    identityStoreId: Optional[String] = None
    persona: Optional[StudioPersona] = None
    principalId: Optional[String] = None
    sid: Optional[String] = None


class StudioMembershipList(RootModel[List[StudioMembership]]):
    root: List[StudioMembership] = Field(..., max_length=20, min_length=0)


class TagResourceRequest(BaseModel):
    tags: Optional[Tags] = None


class UpdateLaunchProfileMemberResponse(BaseModel):
    member: Optional[LaunchProfileMembership] = None


class UpdateStudioComponentRequest(BaseModel):
    configuration: Optional[StudioComponentConfiguration] = None
    description: Optional[StudioComponentDescription] = None
    ec2SecurityGroupIds: Optional[StudioComponentSecurityGroupIdList] = None
    initializationScripts: Optional[StudioComponentInitializationScriptList] = None
    name: Optional[StudioComponentName] = None
    runtimeRoleArn: Optional[RoleArn] = None
    scriptParameters: Optional[StudioComponentScriptParameterKeyValueList] = None
    secureInitializationRoleArn: Optional[RoleArn] = None
    subtype: Optional[StudioComponentSubtype] = None
    type: Optional[StudioComponentType] = None


class VolumeConfiguration(BaseModel):
    iops: Optional[VolumeIops] = None
    size: Optional[VolumeSizeInGiB] = None
    throughput: Optional[VolumeThroughputInMiBs] = None


class Field20200801StudiosStudioIdLaunchProfilesLaunchProfileIdMembershipPostRequest(
    BaseModel
):
    identityStoreId: str = Field(..., description='The ID of the identity store.')
    members: List[NewLaunchProfileMember] = Field(
        ..., description='A list of members.', max_length=20, min_length=1
    )


class Field20200801StudiosStudioIdMembershipPostRequest(BaseModel):
    identityStoreId: str = Field(..., description='The ID of the identity store.')
    members: List[NewStudioMember] = Field(
        ..., description='A list of members.', max_length=20, min_length=1
    )


class Configuration(BaseModel):
    activeDirectoryConfiguration: Optional[ActiveDirectoryConfiguration] = None
    computeFarmConfiguration: Optional[ComputeFarmConfiguration] = None
    licenseServiceConfiguration: Optional[LicenseServiceConfiguration] = None
    sharedFileSystemConfiguration: Optional[SharedFileSystemConfiguration] = None


class Field20200801StudiosStudioIdStudioComponentsPostRequest(BaseModel):
    configuration: Optional[Configuration] = Field(
        None,
        description='The configuration of the studio component, based on component type.',
    )
    description: Optional[SecretStr] = Field(None, description='The description.')
    ec2SecurityGroupIds: Optional[List[SecurityGroupId]] = Field(
        None,
        description='The EC2 security groups that control access to the studio component.',
        max_length=30,
        min_length=0,
    )
    initializationScripts: Optional[List[StudioComponentInitializationScript]] = Field(
        None, description='Initialization scripts for studio components.'
    )
    name: SecretStr = Field(..., description='The name for the studio component.')
    runtimeRoleArn: Optional[constr(min_length=0, max_length=2048)] = Field(
        None,
        description='An IAM role attached to a Studio Component that gives the studio component access to Amazon Web Services resources at anytime while the instance is running. ',
    )
    scriptParameters: Optional[List[ScriptParameterKeyValue]] = Field(
        None,
        description='Parameters for the studio component scripts.',
        max_length=30,
        min_length=0,
    )
    secureInitializationRoleArn: Optional[constr(min_length=0, max_length=2048)] = (
        Field(
            None,
            description='An IAM role attached to Studio Component when the system initialization script runs which give the studio component access to Amazon Web Services resources when the system initialization script runs.',
        )
    )
    subtype: Optional[Subtype] = Field(
        None, description='The specific subtype of a studio component.'
    )
    tags: Optional[Dict[str, String]] = Field(
        None,
        description='A collection of labels, in the form of key-value pairs, that apply to this resource.',
    )
    type: Type = Field(..., description='The type of the studio component.')


class Field20200801StudiosStudioIdStudioComponentsStudioComponentIdPatchRequest(
    BaseModel
):
    configuration: Optional[Configuration] = Field(
        None,
        description='The configuration of the studio component, based on component type.',
    )
    description: Optional[SecretStr] = Field(None, description='The description.')
    ec2SecurityGroupIds: Optional[List[SecurityGroupId]] = Field(
        None,
        description='The EC2 security groups that control access to the studio component.',
        max_length=30,
        min_length=0,
    )
    initializationScripts: Optional[List[StudioComponentInitializationScript]] = Field(
        None, description='Initialization scripts for studio components.'
    )
    name: Optional[SecretStr] = Field(
        None, description='The name for the studio component.'
    )
    runtimeRoleArn: Optional[constr(min_length=0, max_length=2048)] = Field(
        None,
        description='An IAM role attached to a Studio Component that gives the studio component access to Amazon Web Services resources at anytime while the instance is running. ',
    )
    scriptParameters: Optional[List[ScriptParameterKeyValue]] = Field(
        None,
        description='Parameters for the studio component scripts.',
        max_length=30,
        min_length=0,
    )
    secureInitializationRoleArn: Optional[constr(min_length=0, max_length=2048)] = (
        Field(
            None,
            description='An IAM role attached to Studio Component when the system initialization script runs which give the studio component access to Amazon Web Services resources when the system initialization script runs.',
        )
    )
    subtype: Optional[Subtype] = Field(
        None, description='The specific subtype of a studio component.'
    )
    type: Optional[Type] = Field(None, description='The type of the studio component.')


class AcceptEulasRequest(BaseModel):
    eulaIds: Optional[EulaIdList] = None


class AcceptEulasResponse(BaseModel):
    eulaAcceptances: Optional[EulaAcceptanceList] = None


class CreateStreamingSessionStreamResponse(BaseModel):
    stream: Optional[StreamingSessionStream] = None


class CreateStudioComponentRequest(BaseModel):
    configuration: Optional[StudioComponentConfiguration] = None
    description: Optional[StudioComponentDescription] = None
    ec2SecurityGroupIds: Optional[StudioComponentSecurityGroupIdList] = None
    initializationScripts: Optional[StudioComponentInitializationScriptList] = None
    name: StudioComponentName
    runtimeRoleArn: Optional[RoleArn] = None
    scriptParameters: Optional[StudioComponentScriptParameterKeyValueList] = None
    secureInitializationRoleArn: Optional[RoleArn] = None
    subtype: Optional[StudioComponentSubtype] = None
    tags: Optional[Tags] = None
    type: StudioComponentType


class CreateStudioRequest(BaseModel):
    adminRoleArn: RoleArn
    displayName: StudioDisplayName
    studioEncryptionConfiguration: Optional[StudioEncryptionConfiguration] = None
    studioName: StudioName
    tags: Optional[Tags] = None
    userRoleArn: RoleArn


class GetLaunchProfileMemberResponse(BaseModel):
    member: Optional[LaunchProfileMembership] = None


class GetStreamingSessionBackupResponse(BaseModel):
    streamingSessionBackup: Optional[StreamingSessionBackup] = None


class GetStreamingSessionStreamResponse(BaseModel):
    stream: Optional[StreamingSessionStream] = None


class GetStudioMemberResponse(BaseModel):
    member: Optional[StudioMembership] = None


class LaunchProfileInitialization(BaseModel):
    activeDirectory: Optional[LaunchProfileInitializationActiveDirectory] = None
    ec2SecurityGroupIds: Optional[LaunchProfileSecurityGroupIdList] = None
    launchProfileId: Optional[LaunchProfileId] = None
    launchProfileProtocolVersion: Optional[LaunchProfileProtocolVersion] = None
    launchPurpose: Optional[LaunchPurpose] = None
    name: Optional[LaunchProfileName] = None
    platform: Optional[LaunchProfilePlatform] = None
    systemInitializationScripts: Optional[LaunchProfileInitializationScriptList] = None
    userInitializationScripts: Optional[LaunchProfileInitializationScriptList] = None


class ListStreamingSessionBackupsResponse(BaseModel):
    nextToken: Optional[String] = None
    streamingSessionBackups: Optional[StreamingSessionBackupList] = None


class ListStudioMembersResponse(BaseModel):
    members: Optional[StudioMembershipList] = None
    nextToken: Optional[String] = None


class StreamConfigurationSessionStorage(BaseModel):
    mode: StreamingSessionStorageModeList
    root: Optional[StreamingSessionStorageRoot] = None


class StreamingImage(BaseModel):
    arn: Optional[String] = None
    description: Optional[StreamingImageDescription] = None
    ec2ImageId: Optional[EC2ImageId] = None
    encryptionConfiguration: Optional[StreamingImageEncryptionConfiguration] = None
    eulaIds: Optional[EulaIdList] = None
    name: Optional[StreamingImageName] = None
    owner: Optional[StreamingImageOwner] = None
    platform: Optional[StreamingImagePlatform] = None
    state: Optional[StreamingImageState] = None
    statusCode: Optional[StreamingImageStatusCode] = None
    statusMessage: Optional[String] = None
    streamingImageId: Optional[StreamingImageId] = None
    tags: Optional[Tags] = None


class StreamingImageList(RootModel[List[StreamingImage]]):
    root: List[StreamingImage]


class StreamingSession(BaseModel):
    arn: Optional[String] = None
    automaticTerminationMode: Optional[AutomaticTerminationMode] = None
    backupMode: Optional[SessionBackupMode] = None
    createdAt: Optional[Timestamp] = None
    createdBy: Optional[String] = None
    ec2InstanceType: Optional[String] = None
    launchProfileId: Optional[String] = None
    maxBackupsToRetain: Optional[StreamConfigurationMaxBackupsToRetain] = None
    ownedBy: Optional[String] = None
    sessionId: Optional[StreamingSessionId] = None
    sessionPersistenceMode: Optional[SessionPersistenceMode] = None
    startedAt: Optional[Timestamp] = None
    startedBy: Optional[String] = None
    startedFromBackupId: Optional[String] = None
    state: Optional[StreamingSessionState] = None
    statusCode: Optional[StreamingSessionStatusCode] = None
    statusMessage: Optional[String] = None
    stopAt: Optional[Timestamp] = None
    stoppedAt: Optional[Timestamp] = None
    stoppedBy: Optional[String] = None
    streamingImageId: Optional[StreamingImageId] = None
    tags: Optional[Tags] = None
    terminateAt: Optional[Timestamp] = None
    updatedAt: Optional[Timestamp] = None
    updatedBy: Optional[String] = None
    volumeConfiguration: Optional[VolumeConfiguration] = None
    volumeRetentionMode: Optional[VolumeRetentionMode] = None


class StreamingSessionList(RootModel[List[StreamingSession]]):
    root: List[StreamingSession]


class Studio(BaseModel):
    adminRoleArn: Optional[RoleArn] = None
    arn: Optional[String] = None
    createdAt: Optional[Timestamp] = None
    displayName: Optional[StudioDisplayName] = None
    homeRegion: Optional[Region] = None
    ssoClientId: Optional[String] = None
    state: Optional[StudioState] = None
    statusCode: Optional[StudioStatusCode] = None
    statusMessage: Optional[String] = None
    studioEncryptionConfiguration: Optional[StudioEncryptionConfiguration] = None
    studioId: Optional[String] = None
    studioName: Optional[StudioName] = None
    studioUrl: Optional[String] = None
    tags: Optional[Tags] = None
    updatedAt: Optional[Timestamp] = None
    userRoleArn: Optional[RoleArn] = None


class StudioComponent(BaseModel):
    arn: Optional[String] = None
    configuration: Optional[StudioComponentConfiguration] = None
    createdAt: Optional[Timestamp] = None
    createdBy: Optional[String] = None
    description: Optional[StudioComponentDescription] = None
    ec2SecurityGroupIds: Optional[StudioComponentSecurityGroupIdList] = None
    initializationScripts: Optional[StudioComponentInitializationScriptList] = None
    name: Optional[StudioComponentName] = None
    runtimeRoleArn: Optional[RoleArn] = None
    scriptParameters: Optional[StudioComponentScriptParameterKeyValueList] = None
    secureInitializationRoleArn: Optional[RoleArn] = None
    state: Optional[StudioComponentState] = None
    statusCode: Optional[StudioComponentStatusCode] = None
    statusMessage: Optional[String] = None
    studioComponentId: Optional[StudioComponentId] = None
    subtype: Optional[StudioComponentSubtype] = None
    tags: Optional[Tags] = None
    type: Optional[StudioComponentType] = None
    updatedAt: Optional[Timestamp] = None
    updatedBy: Optional[String] = None


class StudioComponentList(RootModel[List[StudioComponent]]):
    root: List[StudioComponent] = Field(..., max_length=50, min_length=0)


class StudioList(RootModel[List[Studio]]):
    root: List[Studio]


class UpdateStreamingImageResponse(BaseModel):
    streamingImage: Optional[StreamingImage] = None


class UpdateStudioComponentResponse(BaseModel):
    studioComponent: Optional[StudioComponent] = None


class UpdateStudioResponse(BaseModel):
    studio: Studio


class StreamConfiguration1(BaseModel):
    automaticTerminationMode: Optional[AutomaticTerminationMode] = None
    clipboardMode: Optional[StreamingClipboardMode] = None
    ec2InstanceTypes: Optional[StreamingInstanceTypeList] = None
    maxSessionLengthInMinutes: Optional[
        StreamConfigurationMaxSessionLengthInMinutes
    ] = None
    maxStoppedSessionLengthInMinutes: Optional[
        StreamConfigurationMaxStoppedSessionLengthInMinutes
    ] = None
    sessionBackup: Optional[StreamConfigurationSessionBackup] = None
    sessionPersistenceMode: Optional[SessionPersistenceMode] = None
    sessionStorage: Optional[StreamConfigurationSessionStorage] = None
    streamingImageIds: Optional[StreamingImageIdList] = None
    volumeConfiguration: Optional[VolumeConfiguration] = None


class Field20200801StudiosStudioIdLaunchProfilesPostRequest(BaseModel):
    description: Optional[SecretStr] = Field(
        None, description='A human-readable description of the launch profile.'
    )
    ec2SubnetIds: List[EC2SubnetId] = Field(
        ...,
        description='Specifies the IDs of the EC2 subnets where streaming sessions will be accessible from. These subnets must support the specified instance types. ',
        max_length=6,
        min_length=0,
    )
    launchProfileProtocolVersions: List[LaunchProfileProtocolVersion] = Field(
        ...,
        description='The version number of the protocol that is used by the launch profile. The only valid version is "2021-03-31".',
    )
    name: SecretStr = Field(..., description='The name for the launch profile.')
    streamConfiguration: StreamConfiguration1 = Field(
        ...,
        description='Configuration for streaming workstations created using this launch profile.',
    )
    studioComponentIds: List[String] = Field(
        ...,
        description='Unique identifiers for a collection of studio components that can be used with this launch profile.',
        max_length=100,
        min_length=1,
    )
    tags: Optional[Dict[str, String]] = Field(
        None,
        description='A collection of labels, in the form of key-value pairs, that apply to this resource.',
    )


class Field20200801StudiosStudioIdLaunchProfilesLaunchProfileIdPatchRequest(BaseModel):
    description: Optional[SecretStr] = Field(
        None, description='A human-readable description of the launch profile.'
    )
    launchProfileProtocolVersions: Optional[List[LaunchProfileProtocolVersion]] = Field(
        None,
        description='The version number of the protocol that is used by the launch profile. The only valid version is "2021-03-31".',
    )
    name: Optional[SecretStr] = Field(
        None, description='The name for the launch profile.'
    )
    streamConfiguration: Optional[StreamConfiguration1] = Field(
        None,
        description='Configuration for streaming workstations created using this launch profile.',
    )
    studioComponentIds: Optional[List[String]] = Field(
        None,
        description='Unique identifiers for a collection of studio components that can be used with this launch profile.',
        max_length=100,
        min_length=1,
    )


class CreateStreamingImageResponse(BaseModel):
    streamingImage: Optional[StreamingImage] = None


class CreateStreamingSessionResponse(BaseModel):
    session: Optional[StreamingSession] = None


class CreateStudioComponentResponse(BaseModel):
    studioComponent: Optional[StudioComponent] = None


class CreateStudioResponse(BaseModel):
    studio: Optional[Studio] = None


class DeleteStreamingImageResponse(BaseModel):
    streamingImage: Optional[StreamingImage] = None


class DeleteStreamingSessionResponse(BaseModel):
    session: Optional[StreamingSession] = None


class DeleteStudioComponentResponse(BaseModel):
    studioComponent: Optional[StudioComponent] = None


class DeleteStudioResponse(BaseModel):
    studio: Studio


class GetLaunchProfileInitializationResponse(BaseModel):
    launchProfileInitialization: Optional[LaunchProfileInitialization] = None


class GetStreamingImageResponse(BaseModel):
    streamingImage: Optional[StreamingImage] = None


class GetStreamingSessionResponse(BaseModel):
    session: Optional[StreamingSession] = None


class GetStudioComponentResponse(BaseModel):
    studioComponent: Optional[StudioComponent] = None


class GetStudioResponse(BaseModel):
    studio: Studio


class ListStreamingImagesResponse(BaseModel):
    nextToken: Optional[String] = None
    streamingImages: Optional[StreamingImageList] = None


class ListStreamingSessionsResponse(BaseModel):
    nextToken: Optional[String] = None
    sessions: Optional[StreamingSessionList] = None


class ListStudioComponentsResponse(BaseModel):
    nextToken: Optional[String] = None
    studioComponents: Optional[StudioComponentList] = None


class ListStudiosResponse(BaseModel):
    nextToken: Optional[String] = None
    studios: StudioList


class StartStreamingSessionResponse(BaseModel):
    session: Optional[StreamingSession] = None


class StartStudioSSOConfigurationRepairResponse(BaseModel):
    studio: Studio


class StopStreamingSessionResponse(BaseModel):
    session: Optional[StreamingSession] = None


class StreamConfiguration(BaseModel):
    automaticTerminationMode: Optional[AutomaticTerminationMode] = None
    clipboardMode: StreamingClipboardMode
    ec2InstanceTypes: StreamingInstanceTypeList
    maxSessionLengthInMinutes: Optional[
        StreamConfigurationMaxSessionLengthInMinutes
    ] = None
    maxStoppedSessionLengthInMinutes: Optional[
        StreamConfigurationMaxStoppedSessionLengthInMinutes
    ] = None
    sessionBackup: Optional[StreamConfigurationSessionBackup] = None
    sessionPersistenceMode: Optional[SessionPersistenceMode] = None
    sessionStorage: Optional[StreamConfigurationSessionStorage] = None
    streamingImageIds: StreamingImageIdList
    volumeConfiguration: Optional[VolumeConfiguration] = None


class StreamConfigurationCreate(BaseModel):
    automaticTerminationMode: Optional[AutomaticTerminationMode] = None
    clipboardMode: StreamingClipboardMode
    ec2InstanceTypes: StreamingInstanceTypeList
    maxSessionLengthInMinutes: Optional[
        StreamConfigurationMaxSessionLengthInMinutes
    ] = None
    maxStoppedSessionLengthInMinutes: Optional[
        StreamConfigurationMaxStoppedSessionLengthInMinutes
    ] = None
    sessionBackup: Optional[StreamConfigurationSessionBackup] = None
    sessionPersistenceMode: Optional[SessionPersistenceMode] = None
    sessionStorage: Optional[StreamConfigurationSessionStorage] = None
    streamingImageIds: StreamingImageIdList
    volumeConfiguration: Optional[VolumeConfiguration] = None


class UpdateLaunchProfileRequest(BaseModel):
    description: Optional[LaunchProfileDescription] = None
    launchProfileProtocolVersions: Optional[LaunchProfileProtocolVersionList] = None
    name: Optional[LaunchProfileName] = None
    streamConfiguration: Optional[StreamConfigurationCreate] = None
    studioComponentIds: Optional[LaunchProfileStudioComponentIdList] = None


class CreateLaunchProfileRequest(BaseModel):
    description: Optional[LaunchProfileDescription] = None
    ec2SubnetIds: EC2SubnetIdList
    launchProfileProtocolVersions: LaunchProfileProtocolVersionList
    name: LaunchProfileName
    streamConfiguration: StreamConfigurationCreate
    studioComponentIds: LaunchProfileStudioComponentIdList
    tags: Optional[Tags] = None


class LaunchProfile(BaseModel):
    arn: Optional[String] = None
    createdAt: Optional[Timestamp] = None
    createdBy: Optional[String] = None
    description: Optional[LaunchProfileDescription] = None
    ec2SubnetIds: Optional[EC2SubnetIdList] = None
    launchProfileId: Optional[LaunchProfileId] = None
    launchProfileProtocolVersions: Optional[LaunchProfileProtocolVersionList] = None
    name: Optional[LaunchProfileName] = None
    state: Optional[LaunchProfileState] = None
    statusCode: Optional[LaunchProfileStatusCode] = None
    statusMessage: Optional[String] = None
    streamConfiguration: Optional[StreamConfiguration] = None
    studioComponentIds: Optional[LaunchProfileStudioComponentIdList] = None
    tags: Optional[Tags] = None
    updatedAt: Optional[Timestamp] = None
    updatedBy: Optional[String] = None
    validationResults: Optional[ValidationResults] = None


class LaunchProfileList(RootModel[List[LaunchProfile]]):
    root: List[LaunchProfile]


class ListLaunchProfilesResponse(BaseModel):
    launchProfiles: Optional[LaunchProfileList] = None
    nextToken: Optional[String] = None


class UpdateLaunchProfileResponse(BaseModel):
    launchProfile: Optional[LaunchProfile] = None


class CreateLaunchProfileResponse(BaseModel):
    launchProfile: Optional[LaunchProfile] = None


class DeleteLaunchProfileResponse(BaseModel):
    launchProfile: Optional[LaunchProfile] = None


class GetLaunchProfileDetailsResponse(BaseModel):
    launchProfile: Optional[LaunchProfile] = None
    streamingImages: Optional[StreamingImageList] = None
    studioComponentSummaries: Optional[StudioComponentSummaryList] = None


class GetLaunchProfileResponse(BaseModel):
    launchProfile: Optional[LaunchProfile] = None
